%YAML 1.2
---

# operator templates
####################

# izhikevich operator with biophysiologically relevant parameters
ik_op:
  base: OperatorTemplate
  equations:
    - "r' = (Delta*k^2/(pi*C) + r*(k*(2.0*v-v_r-v_t) - g_e*s_e - g_i*s_i)) / C"
    - "v' = (k*v*(v-v_r-v_t) - (pi*C*r)^2/k + k*v_r*v_t + g_e*s_e*(E_e-v) + g_i*s_i*(E_i-v) + eta + I_ext) / C"
    - "s' = x / tau_s"
    - "x' = (r - 2*x - s) / tau_s"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    s: variable(0.0)
    x: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g_e: 20.0
    g_i: 10.0
    E_e: 0.0
    E_i: -65.0
    tau_s: 6.0
    eta: 0.0
    I_ext: input(0.0)
    s_e: input(0.0)
    s_i: input(0.0)

# qif operator
qif_op:
  base: OperatorTemplate
  equations:
    - "r' = (Delta/(pi*tau) + 2.0*r*v) / tau"
    - "v' = (v^2 - (pi*tau*r)^2 + tau*(J_e*s_e - J_i*s_i) + eta + I_ext) / tau"
    - "s' = r - s/tau_s"
    - "x' = (r - 2*x - s) / tau_s"
  variables:
    r: output(0.01)
    v: variable(-60.0)
    s: variable(0.05)
    x: variable(0.05)
    Delta: 0.1
    tau: 10.0
    J_e: 20.0
    J_i: 10.0
    tau_s: 6.0
    eta: 0.0
    I_ext: input(0.0)
    s_e: input(0.0)
    s_i: input(0.0)

# izhikevich operator with SFA
ik_sfa_op:
  base: OperatorTemplate
  equations:
    - "r' = (Delta*k^2/(pi*C) + r*(k*(2.0*v-v_r-v_t) - g_e*s_e - g_i*s_i)) / C"
    - "v' = (k*v*(v-v_r-v_t) - (pi*C*r)^2/k + k*v_r*v_t + g_e*s_e*(E_e-v) + g_i*s_i*(E_i-v) + eta + I_ext - u) / C"
    - "u' = w / tau_u"
    - "w' = (kappa*r - 2*w - u) / tau_u"
    - "s' = x / tau_s"
    - "x' = (r - 2*x - s) / tau_s"
  variables:
    r: output(0.01)
    v: variable(-60.0)
    u: variable(50.0)
    w: variable(50.0)
    s: variable(0.05)
    x: variable(0.05)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g_e: 20.0
    g_i: 10.0
    E_e: 0.0
    E_i: -65.0
    kappa: 10.0
    tau_u: 500.0
    tau_s: 6.0
    eta: 0.0
    I_ext: input(0.0)
    s_e: input(0.0)
    s_i: input(0.0)

# qif operator with SFA
qif_sfa_op:
  base: OperatorTemplate
  equations:
    - "r' = (Delta/(pi*tau + kappa*pi*tau) + 2.0*r*v) / tau"
    - "v' = (v^2 - (pi*tau*r)^2 + tau*(J_e*s_e - J_i*s_i) + eta + I_ext - u) / tau"
    - "u' = (kappa*(tau*(J_e*s_e - J_i*s_i) + eta + I_ext) - u*(1 + kappa)) / tau_u"
    - "s' = x/tau_s"
    - "x' = (r - 2*x - s) / tau_s"
  variables:
    r: output(0.01)
    v: variable(-60.0)
    u: variable(0.0)
    s: variable(0.05)
    x: variable(0.05)
    Delta: 0.1
    tau: 10.0
    J_e: 20.0
    J_i: 10.0
    tau_s: 6.0
    eta: 0.0
    kappa: 1.0
    tau_u: 100.0
    I_ext: input(0.0)
    s_e: input(0.0)
    s_i: input(0.0)

# izhikevich operator with synaptic short-term depression
ik_stp_op:
  base: OperatorTemplate
  equations:
    - "r' = (Delta*k^2/(pi*C) + r*(k*(2.0*v-v_r-v_t) - w*g_e*s_e - g_i*s_i)) / C"
    - "v' = (k*v*(v-v_r-v_t) - (pi*C*r)^2/k + k*v_r*v_t + w*g_e*s_e*(E_e-v) + g_i*s_i*(E_i-v) + eta + I_ext - u) / C"
    - "u' = kappa*r - u / tau_u"
    - "w' = (1 - w*alpha*r - w) / tau_w"
    - "s' = x / tau_s"
    - "x' = (r - 2*x - s) / tau_s"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    w: variable(1.0)
    s: variable(0.0)
    x: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g_e: 20.0
    g_i: 10.0
    E_e: 0.0
    E_i: -65.0
    kappa: 10.0
    alpha: 100.0
    tau_u: 300.0
    tau_w: 800.0
    tau_s: 6.0
    eta: 0.0
    I_ext: input(0.0)
    s_e: input(0.0)
    s_i: input(0.0)

# parameters for waveform prototype 0
proto_0:
  base: ik_stp_op
  variables:
    Delta: 1.0
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g_i: 0.0
    g_e: 60.0
    kappa: 1.0
    alpha: 200.0
    tau_u: 200.0
    tau_w: 800.0
    tau_s: 6.0
    eta: 67.02

# parameters for waveform prototype 1
proto_1:
  base: ik_stp_op
  variables:
    Delta: 1.0
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g_i: 0.0
    g_e: 60.0
    kappa: 1.0
    alpha: 200.0
    tau_u: 200.0
    tau_w: 800.0
    tau_s: 6.0
    eta: 67.02

# parameters for waveform prototype 2
proto_2:
  base: ik_stp_op
  variables:
    Delta: 1.0
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g_i: 0.0
    g_e: 60.0
    kappa: 1.0
    alpha: 200.0
    tau_u: 200.0
    tau_w: 800.0
    tau_s: 6.0
    eta: 67.02

# parameters for fast-spiking neurons
fs_op:
  base: ik_ei_op
  variables:
    Delta: 1.0
    C: 20.0
    k: 1.0
    v_r: -55.0
    v_t: -40.0
    g_ampa: 1.0
    g_gabaa: 1.0
    E_ampa: 0.0
    E_gabaa: -65.0
    b: 0.025
    a: 0.2
    d: 0.0
    tau_ampa: 6.0
    tau_gabaa: 8.0

# parameters for low-threshold-spiking neurons
lts_op:
  base: ik_ei_op
  variables:
    Delta: 1.0
    C: 100.0
    k: 1.0
    v_r: -56.0
    v_t: -42.0
    g_ampa: 1.0
    g_gabaa: 1.0
    E_ampa: 0.0
    E_gabaa: -65.0
    b: 8.0
    a: 0.03
    d: 20.0
    tau_ampa: 6.0
    tau_gabaa: 8.0

# node templates
################

# population of qif neurons
qif_pop:
  base: NodeTemplate
  operators:
    - qif_op

# population of qif neurons with SFA
qif_sfa_pop:
  base: NodeTemplate
  operators:
    - qif_sfa_op

# population of biophysiologically informed izhikevich neurons
ik_pop:
  base: NodeTemplate
  operators:
    - ik_op

# population of Izhikevich neurons with synaptic short-term plasticity
stp_pop:
  base: NodeTemplate
  operators:
    - ik_stp_op

# regular-spiking neuron population
rs:
  base: NodeTemplate
  operators:
    - rs_op

# intrinsically-bursting neuron population
ib:
  base: NodeTemplate
  operators:
    - ib_op

# fast-spiking neuron population
fs:
  base: NodeTemplate
  operators:
    - fs_op

# low-threshold-spiking neuron population
lts:
  base: NodeTemplate
  operators:
    - lts_op

# IK neuron population with threshold adaptation
sfa_pop:
  base: NodeTemplate
  operators:
    - ik_sfa_op

# circuit templates
###################

# biophysiologically informed izhikevich population
ik:
  base: CircuitTemplate
  nodes:
    p: ik_pop
  edges:
    - [p/ik_op/s, p/ik_op/s_e, null, {weight: 1.0}]

# izhikevich population with short-term synaptic plasticity
ik_stp:
  base: CircuitTemplate
  nodes:
    p: stp_pop
  edges:
    - [p/ik_stp_op/s, p/ik_stp_op/s_e, null, {weight: 1.0}]

# izhikevich population with SFA
ik_sfa:
  base: CircuitTemplate
  nodes:
    p: sfa_pop
  edges:
    - [p/ik_sfa_op/s, p/ik_sfa_op/s_e, null, {weight: 1.0}]

# rs-fs circuit
eic_sfa:
  base: CircuitTemplate
  nodes:
    exc: sfa_pop
    inh: ik_pop
  edges:
    - [exc/ik_sfa_op/s, exc/ik_sfa_op/s_e, null, {weight: 1.0}]
    - [exc/ik_sfa_op/s, inh/ik_op/s_e, null, {weight: 1.0}]
    - [inh/ik_op/s, exc/ik_sfa_op/s_i, null, {weight: 1.0}]
    - [inh/ik_op/s, inh/ik_op/s_i, null, {weight: 1.0}]

# rs-fs circuit
eic_stp:
  base: CircuitTemplate
  nodes:
    exc: stp_pop
    inh: ik_pop
  edges:
    - [exc/ik_stp_op/s, exc/ik_stp_op/s_e, null, {weight: 1.0}]
    - [exc/ik_stp_op/s, inh/ik_op/s_e, null, {weight: 1.0}]
    - [inh/ik_op/s, exc/ik_stp_op/s_i, null, {weight: 1.0}]
    - [inh/ik_op/s, inh/ik_op/s_i, null, {weight: 1.0}]
