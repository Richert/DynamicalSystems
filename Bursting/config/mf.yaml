# operator templates
####################

# adIK neurons with distributed eta
ik_op:
  base: OperatorTemplate
  equations:
    - "r' = absv(Delta + w)/pi + r*(2*v-alpha)"
    - "v' = v*(v-alpha) - (pi*r)^2 + J*s_in + eta + I_ext - u"
    - "u' = (b*v - u) / tau_u + kappa*(J*s_in + eta + I_ext - u)"
    - "w' = -kappa*(Delta+w) + (Delta_b*v*sign(v) - w)/tau_u"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(0.0)
    u: variable(0.0)
    w: variable(0.0)
    s: variable(0.0)
    Delta: 0.1
    Delta_b: 0.1
    alpha: 0.6
    J: 20.0
    b: -2.0
    tau_u: 50.0
    tau_s: 6.0
    kappa: 10.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed eta
eta_op:
  base: OperatorTemplate
  equations:
    - "r' = (k*Delta/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u) / tau_u + kappa*r"
    - "x' = (r-x) / tau_x"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed eta
eta_op_uw2:
  base: OperatorTemplate
  equations:
    - "Delta_v = C*pi*r/k"
    - "r' = (k*absv(Delta+w)/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "w' = (Delta_b*(v-v_r)*(v-v_t) - w - Delta_b*Delta_v^2 + 2*b*v*Delta_v - b*Delta_v*(v_r+v_t)) / tau_u"
    - "u' = (b*(v-v_r)*(v-v_t) - u - b*Delta_v^2 - 2*Delta_v*Delta_b + Delta_v*Delta_b*(v_r+v_t)) / tau_u + kappa*x"
    - "x' = (r-x) / tau_x"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    w: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta_v: variable(0.0)
    Delta: 0.1
    Delta_b: 0.01
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed eta
eta_op_uw:
  base: OperatorTemplate
  equations:
    - "r' = (k*absv(Delta+w)/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "w' = (Delta_b*(v-v_r)*(v-v_t) - w) / tau_u"
    - "u' = (b*(v-v_r)*(v-v_t) - u) / tau_u + kappa*x"
    - "x' = (r-x) / tau_x"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    w: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta: 0.1
    Delta_b: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed eta
eta_op_sfa:
  base: OperatorTemplate
  equations:
    - "r' = (k*(w + Delta)/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u + kappa*(g*s_in*(E_r-v) + I_ext + eta - u)) / tau_u"
    - "w' = (Delta_b*absv(v-v_r) -w -kappa*(Delta+w)) / tau_u"
    - "x' = (r-x) / tau_x"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.01)
    v: variable(-59.0)
    u: variable(0.0)
    w: variable(0.1)
    x: variable(0.0)
    s: variable(0.01)
    Delta: 0.1
    Delta_b: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed eta and a global recovery variable u
eta_op_global:
  base: OperatorTemplate
  equations:
    - "r' = (k*Delta/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u)/tau_u + kappa*x"
    - "x' = (r-x) / tau_x"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta_u: variable(0.0)
    Delta_v: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed b
b_op:
  base: OperatorTemplate
  equations:
    - "r' = (k*w/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u)/tau_u + kappa*x"
    - "w' = (Delta*absv(v-v_r) - w) / tau_u"
    - "x' = (r-x) / tau_x"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    w: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta: 0.2
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed b and a global recovery variable u
b_op_corrected:
  base: OperatorTemplate
  equations:
    - "r' = (k*w/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r+mu) - u)/tau_u + kappa*x"
    - "w' = (absv(b)*(Delta + pi*r*C/k) - w) / tau_u"
    - "x' = (r-x) / tau_x"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    w: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta: 1.0
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    mu: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# node templates
################

# IK neuron population with distributed etas
ik_pop:
  base: NodeTemplate
  operators:
    - ik_op

# adIK neuron population with distributed etas
eta_pop:
  base: NodeTemplate
  operators:
    - eta_op

# adIK neuron population with distributed etas
eta_pop_c:
  base: NodeTemplate
  operators:
    - eta_op_c

# adIK neuron population with distributed etas
eta_pop_uw:
  base: NodeTemplate
  operators:
    - eta_op_uw2

# adIK neuron population with distributed etas and a correction term
eta_pop_corrected:
  base: NodeTemplate
  operators:
    - eta_op_corrected

# adIK neuron population with distributed etas and a global recovery variable u
eta_pop_sfa:
  base: NodeTemplate
  operators:
    - eta_op_sfa

# adIK neuron population with distributed bs
b_pop:
  base: NodeTemplate
  operators:
    - b_op

# adIK neuron population with distributed bs and a global recovery variable u
b_pop_corrected:
  base: NodeTemplate
  operators:
    - b_op_corrected

# circuit templates
###################

# adIK neuron population with distributed etas
ik0:
  base: CircuitTemplate
  nodes:
    p: ik_pop
  edges:
    - [p/ik_op/s, p/ik_op/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed etas
ik_eta:
  base: CircuitTemplate
  nodes:
    p: eta_pop
  edges:
    - [p/eta_op/s, p/eta_op/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed etas
ik_eta_uw:
  base: CircuitTemplate
  nodes:
    p: eta_pop_uw
  edges:
    - [p/eta_op_uw2/s, p/eta_op_uw2/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed etas and a correction term
ik_eta_corrected:
  base: CircuitTemplate
  nodes:
    p: eta_pop_corrected
  edges:
    - [p/eta_op_corrected/s, p/eta_op_corrected/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed etas and a global recovery variable u
ik_eta_sfa:
  base: CircuitTemplate
  nodes:
    p: eta_pop_sfa
  edges:
    - [p/eta_op_sfa/s, p/eta_op_sfa/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed bs
ik_b:
  base: CircuitTemplate
  nodes:
    p: b_pop
  edges:
    - [p/b_op/s, p/b_op/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed bs and a global recovery variable u
ik_b_corrected:
  base: CircuitTemplate
  nodes:
    p: b_pop_corrected
  edges:
    - [p/b_op_corrected/s, p/b_op_corrected/s_in, null, {weight: 1.0}]

ik_2pop:
  base: CircuitTemplate
  nodes:
    p1: eta_pop
    p2: eta_pop_c
  edges:
    - [p1/eta_op/s, p1/eta_op/s_in, null, {weight: 0.5}]
    - [p1/eta_op/s, p2/eta_op_c/s_in, null, {weight: 0.5}]
    - [p2/eta_op_c/s, p1/eta_op/s_in, null, {weight: 0.5}]
    - [p2/eta_op_c/s, p2/eta_op_c/s_in, null, {weight: 0.5}]

ik_3pop:
  base: CircuitTemplate
  nodes:
    p1: eta_pop
    p2: eta_pop_c
    p3: eta_pop_c
  edges:
    - [p1/eta_op/s, p1/eta_op/s_in, null, {weight: 0.7}]
    - [p1/eta_op/s, p2/eta_op_c/s_in, null, {weight: 0.7}]
    - [p1/eta_op/s, p3/eta_op_c/s_in, null, {weight: 0.7}]
    - [p2/eta_op_c/s, p1/eta_op/s_in, null, {weight: 0.15}]
    - [p2/eta_op_c/s, p2/eta_op_c/s_in, null, {weight: 0.15}]
    - [p2/eta_op_c/s, p3/eta_op_c/s_in, null, {weight: 0.15}]
    - [p3/eta_op_c/s, p1/eta_op/s_in, null, {weight: 0.15}]
    - [p3/eta_op_c/s, p2/eta_op_c/s_in, null, {weight: 0.15}]
    - [p3/eta_op_c/s, p3/eta_op_c/s_in, null, {weight: 0.15}]
