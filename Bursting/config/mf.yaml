%YAML 1.2
---

# operator templates
####################

# adIK neurons with distributed eta
eta_op:
  base: OperatorTemplate
  equations:
    - "r' = (k*absv(Delta - b*(C*pi*r/k))/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u) / tau_u + kappa*x"
    - "x' = -x/tau_x + r"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed eta
eta_op_corrected:
  base: OperatorTemplate
  equations:
    - "r' = (k*absv(Delta - b*(C*pi*r/k)^(1/3))/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u) / tau_u + kappa*x"
    - "x' = -x/tau_x + r"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed eta and a global recovery variable u
global_eta_op:
  base: OperatorTemplate
  equations:
    - "r' = (k*Delta/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r)^2/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u)/tau_u + x"
    - "x' = -x/tau_x + kappa*r"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta_u: variable(0.0)
    Delta_v: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed b
b_op:
  base: OperatorTemplate
  equations:
    - "r' = (k*Delta*absv(v-v_r)/(C*pi) + r*(k*(2.0*v-v_r-v_t) + b*sign(v-v_r) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - (C*pi*r - Delta*sign(v-v_r))*C*pi*r/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u)/tau_u + kappa*x"
    - "x' = -x/tau_x + r"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# adIK neurons with distributed b and a global recovery variable u
global_b_op:
  base: OperatorTemplate
  equations:
    - "r' = (k*Delta*absv(v-v_r)/(C*pi) + r*(k*(2.0*v-v_r-v_t) - g*s_in)) / C"
    - "v' = (k*(v-v_r)*(v-v_t) - C*pi*r*(C*pi*r - sqrt(Delta/pi^2)*sign(v-v_r))/k + g*s_in*(E_r-v) + eta + I_ext - u) / C"
    - "u' = (b*(v-v_r) - u)/tau_u + x"
    - "x' = -x/tau_x + kappa*r"
    - "s' = -s/tau_s + r"
  variables:
    r: output(0.0)
    v: variable(-60.0)
    u: variable(0.0)
    x: variable(0.0)
    s: variable(0.0)
    Delta: 0.1
    C: 100.0
    k: 0.7
    v_r: -60.0
    v_t: -40.0
    g: 20.0
    E_r: 0.0
    b: -2.0
    tau_u: 30.0
    tau_s: 6.0
    kappa: 10.0
    tau_x: 300.0
    eta: 0.0
    I_ext: input(0.0)
    s_in: input(0.0)

# node templates
################

# adIK neuron population with distributed etas
eta_pop:
  base: NodeTemplate
  operators:
    - eta_op

# adIK neuron population with distributed etas and a correction term
eta_pop_corrected:
  base: NodeTemplate
  operators:
    - eta_op_corrected

# adIK neuron population with distributed etas and a global recovery variable u
global_eta_pop:
  base: NodeTemplate
  operators:
    - global_eta_op

# adIK neuron population with distributed bs
b_pop:
  base: NodeTemplate
  operators:
    - b_op

# adIK neuron population with distributed bs and a global recovery variable u
global_b_pop:
  base: NodeTemplate
  operators:
    - global_b_op

# circuit templates
###################

# adIK neuron population with distributed etas
ik_eta:
  base: CircuitTemplate
  nodes:
    p: eta_pop
  edges:
    - [p/eta_op/s, p/eta_op/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed etas
ik_eta_corrected:
  base: CircuitTemplate
  nodes:
    p: eta_pop_corrected
  edges:
    - [p/eta_op_corrected/s, p/eta_op_corrected/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed etas and a global recovery variable u
ik_eta_global:
  base: CircuitTemplate
  nodes:
    p: global_eta_pop
  edges:
    - [p/global_eta_op/s, p/global_eta_op/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed bs
ik_b:
  base: CircuitTemplate
  nodes:
    p: b_pop
  edges:
    - [p/b_op/s, p/b_op/s_in, null, {weight: 1.0}]

# adIK neuron population with distributed bs and a global recovery variable u
ik_b_global:
  base: CircuitTemplate
  nodes:
    p: global_b_pop
  edges:
    - [p/global_b_op/s, p/global_b_op/s_in, null, {weight: 1.0}]
